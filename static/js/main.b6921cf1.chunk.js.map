{"version":3,"sources":["components/Display.js","components/Inputfield.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Display","date","currTime","className","Inputfield","value","onChange","onClick","reset","type","placeholder","App","storeDate","e","setState","target","timeCal","state","mytime","setInterval","a","Date","clearInterval","days","Math","floor","daysms","hours","hoursms","minutes","minutesms","sec","alert","window","location","reload","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAiBeA,EAdC,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,SACtB,OACC,gCACC,uCACA,qBAAKC,UAAU,gBAAf,SACI,8BAAMF,MAEV,qBAAKE,UAAU,0BAAf,SACI,8BAAMD,UCCEE,EAVI,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,MAAMC,EAA2B,EAA3BA,SAASC,EAAkB,EAAlBA,QAAQC,EAAU,EAAVA,MAC3C,OACC,gCACC,uBAAOF,SAAUA,EAAUG,KAAK,OAAOC,YAAY,kBAAkBL,MAAOA,IAC5E,wBAAQE,QAASA,EAAjB,yBACA,wBAAQA,QAASC,EAAjB,uBCmDYG,E,kDApDd,aAAc,IAAD,8BACZ,gBAODC,UAAY,SAACC,GACZ,EAAKC,SAAS,CAACb,KAAKY,EAAEE,OAAOV,SATjB,EAYbW,QAAU,WACT,GAAuB,KAApB,EAAKC,MAAMhB,KAKd,IAAIiB,EAAOC,aAAY,WACtB,IAAIC,EAAG,IAAIC,KAAK,EAAKJ,MAAMhB,MAAM,IAAIoB,KACrC,GAAGD,EAAE,GAAS,IAAJA,EAGT,OAFAE,cAAcJ,QACd,EAAKJ,SAAS,CAACZ,SAAS,sBAIzB,IAAMqB,EAAKC,KAAKC,MAAML,EAAE,OAClBM,EAAON,EAAC,MACRO,EAAMH,KAAKC,MAAMC,EAAO,MACxBE,EAAQR,EAAC,KACTS,EAAQL,KAAKC,MAAMG,EAAO,KAC1BE,EAAUV,EAAC,IACXW,EAAIP,KAAKC,MAAMK,EAAU,KAC/B,EAAKhB,SAAS,CAACZ,SAAUqB,EAAK,UAAUI,EAAM,UAAUE,EAAQ,aAAaE,EAAI,oBAChF,UApBDC,MAAM,eAdK,EAqCbxB,MAAQ,WACPyB,OAAOC,SAASC,UApChB,EAAKlB,MAAM,CACVhB,KAAK,GACLC,SAAS,aAJE,E,0CA0Cb,WACC,OACI,gCACC,cAAC,EAAD,CAASD,KAAMmC,KAAKnB,MAAMhB,KAAMC,SAAUkC,KAAKnB,MAAMf,WACrD,cAAC,EAAD,CAAYG,MAAO+B,KAAKnB,MAAMhB,KAAMK,SAAU8B,KAAKxB,UAAWL,QAAS6B,KAAKpB,QAASR,MAAO4B,KAAK5B,e,GA/CtF6B,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b6921cf1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Display = ({date,currTime}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<h1>Timer</h1>\r\n\t\t\t<div className=\"input-display\">\r\n\t\t\t    <div>{date}</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"input-display time-left\">\r\n\t\t\t    <div>{currTime}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst Inputfield = ({value,onChange,onClick,reset}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<input onChange={onChange} type=\"date\" placeholder=\"Enter Your time\" value={value}/>\r\n\t\t\t<button onClick={onClick}>Start Timer</button>\r\n\t\t\t<button onClick={reset}>Reset</button>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Inputfield;","import React from 'react';\nimport './App.css';\nimport Display from '../components/Display';\nimport Inputfield from '../components/Inputfield';\n\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\tdate:\"\",\n\t\t\tcurrTime:\"Time Left\",\n\t\t}\n\t}\n\n\tstoreDate = (e) =>{\n\t\tthis.setState({date:e.target.value});\n\t}\n\n\ttimeCal = () =>{\n\t\tif(this.state.date === \"\"){\n\t\t\talert(\"enter date\");\n\t\t\treturn;\n\t\t}\n\n\t\tlet mytime=setInterval(()=>{\n\t\t\tlet a= new Date(this.state.date)-new Date();\n\t\t\tif(a<0 || a===0){\n\t\t\t\tclearInterval(mytime);\n\t\t\t\tthis.setState({currTime:\"Dead line reached\"});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//conversion of a to days hour and second;\n\t\t\tconst days=Math.floor(a/(24*60*60*1000));\n\t\t\tconst daysms=a % (24*60*60*1000);\n\t\t\tconst hours=Math.floor(daysms/(60*60*1000));\n\t\t\tconst hoursms=a % (60*60*1000);\n\t\t\tconst minutes=Math.floor(hoursms / (60*1000));\n\t\t\tconst minutesms=a % (60*1000);\n\t\t\tconst sec=Math.floor(minutesms/1000);\n\t\t\tthis.setState({currTime:(days+\" days :\"+hours+\" hour :\"+minutes+\" minutes :\"+sec+\" seconds left\")});\n\t\t},500);\n\t}\n\n\treset = () =>{\n\t\twindow.location.reload();\n\t}\n\n\n\trender(){\n\t\treturn(\n\t\t    <div>\n\t\t    \t<Display date={this.state.date} currTime={this.state.currTime}/>\n\t\t\t    <Inputfield value={this.state.date} onChange={this.storeDate} onClick={this.timeCal} reset={this.reset}/>\n\t\t    </div>\n  \t\t)\n\t}\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}